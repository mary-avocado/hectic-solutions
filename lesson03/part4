f =
  \x ->
    if x == 0
    then 1
    else x * f (x - 1)
    
f 3

------------------------------- subst 'f' def

(\x ->
    if x == 0
    then 1
    else x * f (x - 1)) 3

------------------------------- beta-reduction

if 3 == 0
then 1
else 3 * f (3 - 1)

------------------------------- equality

if False
then 1
else 3 * f (3 - 1)

------------------------------- reduce if-then-else

3 * f (3-1)

------------------------------- subtraction

3 * f 2

------------------------------- subst 'f' def

3 * (\x ->
    if x == 0
    then 1
    else x * f (x - 1)) 2

------------------------------- beta-reduction

3 * (if 2 == 0
    then 1
    else 2 * f (2 - 1))

------------------------------- equality

3 * (if False
    then 1
    else 2 * f (2 - 1))
    
------------------------------- reduce if-then-else

3  * (2 * f (2 - 1))

------------------------------- subtraction

3  * (2 * f 1)

------------------------------- subst 'f' def

3 * (2 * (\x ->
               if x == 0
               then 1
               else x * f (x - 1)) 1)

-------------------------------- beta-reduction

3 * (2 * (if 1 == 0
          then 1
          else 1 * f (1 - 1)))
          
-------------------------------- equality

3 * (2 * (if False
          then 1
          else 1 * f (1 - 1)))

-------------------------------- reduce if-then-else

3 * (2 * (1 * f (1 - 1)))

-------------------------------- subtraction

3 * (2 * (1 * f 0))

-------------------------------- subst 'f' def

3 * (2 * (1 * (\x ->
    if x == 0
    then 1
    else x * f (x - 1)) 0))

-------------------------------- beta-reduction

3 * (2 * (1 * 
    (if 0 == 0
    then 1
    else 0 * f (0 - 1))))

-------------------------------- equality

3 * (2 * (1 * 
    (if True
    then 1
    else 0 * f (0 - 1))))
    
-------------------------------- reduce if-then-else

3 * (2 * (1 * 1))

-------------------------------- multiplication

3 * (2 * 1)

-------------------------------- multiplication Ã—2

6






